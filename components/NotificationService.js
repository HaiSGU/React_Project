import React, { useState, useEffect } from 'react';
import * as Notifications from 'expo-notifications';
import * as Device from 'expo-device';
import { Platform } from 'react-native';

// C·∫•u h√¨nh notification
Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: true,
    shouldPlaySound: true,
    shouldSetBadge: false,
  }),
});

export const useNotifications = () => {
  const [expoPushToken, setExpoPushToken] = useState('');
  const [notification, setNotification] = useState(false);

  useEffect(() => {
    registerForPushNotificationsAsync().then(token => setExpoPushToken(token));

    // Listener cho notification khi app ƒëang m·ªü
    const notificationSubscription = Notifications.addNotificationReceivedListener(notification => {
      setNotification(notification);
    });

    // Listener cho notification khi user tap v√†o
    const responseSubscription = Notifications.addNotificationResponseReceivedListener(response => {
      console.log('Notification response:', response);
    });

    return () => {
      notificationSubscription.remove();
      responseSubscription.remove();
    };
  }, []);

  return {
    expoPushToken,
    notification,
    sendLocalNotification,
    scheduleOrderNotification,
  };
};

// ƒêƒÉng k√Ω push notification
async function registerForPushNotificationsAsync() {
  let token;

  if (Platform.OS === 'android') {
    await Notifications.setNotificationChannelAsync('default', {
      name: 'default',
      importance: Notifications.AndroidImportance.MAX,
      vibrationPattern: [0, 250, 250, 250],
      lightColor: '#00b14f',
    });
  }

  if (Device.isDevice) {
    const { status: existingStatus } = await Notifications.getPermissionsAsync();
    let finalStatus = existingStatus;
    if (existingStatus !== 'granted') {
      const { status } = await Notifications.requestPermissionsAsync();
      finalStatus = status;
    }
    if (finalStatus !== 'granted') {
      alert('Failed to get push token for push notification!');
      return;
    }
    token = (await Notifications.getExpoPushTokenAsync()).data;
    console.log('Expo push token:', token);
  } else {
    alert('Must use physical device for Push Notifications');
  }

  return token;
}

// G·ª≠i local notification
export const sendLocalNotification = async (title, body, data = {}) => {
  await Notifications.scheduleNotificationAsync({
    content: {
      title,
      body,
      data,
      sound: 'default',
    },
    trigger: null, // G·ª≠i ngay l·∫≠p t·ª©c
  });
};

// L√™n l·ªãch th√¥ng b√°o ƒë∆°n h√†ng
export const scheduleOrderNotification = async (orderId, estimatedTime) => {
  await Notifications.scheduleNotificationAsync({
    content: {
      title: 'üçï ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n!',
      body: `ƒê∆°n h√†ng #${orderId} s·∫Ω ƒë∆∞·ª£c giao trong ${estimatedTime} ph√∫t`,
      data: { orderId, type: 'order_confirmation' },
      sound: 'default',
    },
    trigger: null,
  });

  // Th√¥ng b√°o khi ƒë∆°n h√†ng ƒëang ƒë∆∞·ª£c chu·∫©n b·ªã
  await Notifications.scheduleNotificationAsync({
    content: {
      title: 'üë®‚Äçüç≥ ƒê∆°n h√†ng ƒëang ƒë∆∞·ª£c chu·∫©n b·ªã',
      body: `ƒê∆°n h√†ng #${orderId} ƒëang ƒë∆∞·ª£c chu·∫©n b·ªã t·∫°i nh√† h√†ng`,
      data: { orderId, type: 'order_preparing' },
      sound: 'default',
    },
    trigger: { seconds: 300 }, // 5 ph√∫t sau
  });

  // Th√¥ng b√°o khi t√†i x·∫ø ƒëang giao h√†ng
  await Notifications.scheduleNotificationAsync({
    content: {
      title: 'üöö T√†i x·∫ø ƒëang giao h√†ng',
      body: `T√†i x·∫ø ƒë√£ nh·∫≠n ƒë∆°n h√†ng #${orderId} v√† ƒëang tr√™n ƒë∆∞·ªùng ƒë·∫øn`,
      data: { orderId, type: 'order_delivering' },
      sound: 'default',
    },
    trigger: { seconds: 600 }, // 10 ph√∫t sau
  });

  // Th√¥ng b√°o khi giao h√†ng th√†nh c√¥ng
  await Notifications.scheduleNotificationAsync({
    content: {
      title: '‚úÖ Giao h√†ng th√†nh c√¥ng!',
      body: `ƒê∆°n h√†ng #${orderId} ƒë√£ ƒë∆∞·ª£c giao th√†nh c√¥ng. C·∫£m ∆°n b·∫°n!`,
      data: { orderId, type: 'order_delivered' },
      sound: 'default',
    },
    trigger: { seconds: 1200 }, // 20 ph√∫t sau
  });
};

// Th√¥ng b√°o khuy·∫øn m√£i
export const sendPromotionNotification = async (title, message) => {
  await Notifications.scheduleNotificationAsync({
    content: {
      title: `üéâ ${title}`,
      body: message,
      data: { type: 'promotion' },
      sound: 'default',
    },
    trigger: null,
  });
};

// Th√¥ng b√°o nh√† h√†ng g·∫ßn nh·∫•t
export const sendNearbyRestaurantNotification = async (restaurantName, distance) => {
  await Notifications.scheduleNotificationAsync({
    content: {
      title: 'üìç Nh√† h√†ng g·∫ßn b·∫°n',
      body: `${restaurantName} ch·ªâ c√°ch b·∫°n ${distance.toFixed(1)}km`,
      data: { type: 'nearby_restaurant', restaurantName },
      sound: 'default',
    },
    trigger: null,
  });
};

